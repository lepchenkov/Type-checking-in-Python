Lecture:

https://www.youtube.com/watch?v=pMgmKJyWKn8

Type-checked Python by @carljm




Why type?
 
    def process(self, items):
        for item in items:
            self.append(item.value.id)

So this process method on some class takes an items agrument. 
What is items? We have an idea of duck typing - we can give a duck
typing answer to what is items. Item is some collection that we can
iterate over and each item in the collections should have a value 
attribute which itself should have an id attribute. 

The problem with this is that code is written once but maintained 
for a long time. And if you come half a year later and forget everything
you need to reestablish this contract by reading the code line by line.
And it is entirely implicit. Sometimes defining the type requires digging
through layers and layers of code until you track down to the origin of 
the collection that passed into process function.   

With the type annotation this goes away:

    from typing import Sequence
    from .models import Item

    def process(self, items: Sequence[Item]) -> None:
        for item in items:
            self.append(item.value.id)

Now i know exactly what I expect to receive: a sequence of this particular 
Item class, and I can go directly to it, I can see whatever attributes and 
methods it has. And this is not really new: people where putting this 
information into docstrings for years now. But in real life people forget
to edit and update type annotations, so they become obsolete. With type 
annotations they may be automatically checked for correctness. 

That's cool, but I don't need it; I would catch it with a test!
Static programmers can say that they even don't need to write tests 
because the compiler catches all their bugs. Both are right and both are 
wrong. In the space of all possible function arguments test coverage is 
very restricted. Parameterized tests can cover a whole range of inputs,
or property-based tests cover even wider variety of possible. But with
type annotations we can eliminate the entire areas of this input space.




How to even type?

    def square(x: int) -> int:
        return x**2

Than make pip install mypy and run mypy square.py. 
Mypy is an open source type checking library that is created and 
maintained by the team in dropbox. It is by far the most commonly used
Python type checker. 

By running mypy square.py we immediately get several errors even without 
writing and running tests.

So the type checker asks us to annotate our functions signatures in order
to validate our assumptions about the input and output types. In between 
there is a lot can infer. For instance:

    from typing import Tuple

    class Photo:
        def __init__(self, width: int, height: int) -> None:
            self.width = width
            self. height = height

In this class we have told that the argements of the initializer are 
both integers, it can infer thorough the assignment to self and understand
that every photo instance will have width and height attributes that are 
both integers. 

    class Photo:
        def __init__(self, width: int, height: int) -> None:
            self.width = width  
            self. height = height

        def get_dimensions(self) -> Tuple[str, str]
            return (self.width, self.height)

And if we create a new method get_dimensions and claim that it returns
a tuple of strings, our type checker will catch an error: incompatible 
return value type (got "Tuple[int, int]", expected "Tuple[str, str]")

We can also infer the type of containers:
if we create a list of photos objects

    photos = [Photo(640, 480), Photo(1024, 768),]

and try to append a string to it:

    photos.append('foo')

The type checker will tell us hey, maybe that is not what you intended 
to do: Argument 1 to "append" of "list" has incompatible type "str";
expected "Photo"

In Python it if perfectly fine to have a list with object of different 
types but type checker assumes that if we initialized the list with 
homogenous set of objects, that is probably what we intended. We can use
explicit type annotations to give a broader type to the list.  

In some cases type inference will not be enough to understand the type
of every variable:

    class Photo:
        def __init__(self, width: int, height: int) -> None:
            self.width = width
            self.height = height
            self.tags =[]

If we create an empty containter, the type checker does not know what we 
intend to put into it so it asks us to be explicit.



Review:
1. Mostly you want to annotate your functions signatures (arguments and
return values).
2. Occasionally you might want to annotate a variable, but usually you 
will do it if the type checker asks you to do it. Otherwise you may end
up with redundant type annorations.




Deeper!
Sometimes we write functions that return more than one type. We can 
handle it with a Union type:

    from typing import Union

    def get_foo_or_bar(id: int) -> Union [Foo, Bar]:
    # the function can return either Foo or a Bar

Very common case of this is function that can return smth. or None:
    def get_foo_or_noe(id: int) -> Union[Foo, None]:

It is so common thar there is a special function for that:
    def get_foo_or_noe(id: int) -> Optional[Foo]:
    ...

So here we have a function get_foo that takes a Foo id which is an Optional
integer and returns either a Foo or None:

    from typing import Optional

    def get_foo(foo_id: Optional[int]) -> Optional[Foo]:
        if foo_id is None:
            return None
        return Foo(foo_id)
        
    my_foo = get_foo(3)
    my_foo.id #error: NoneType has no attribute 'id'
    
The error happends because we specified that get_foo can return a None
and we didn't check if it is actually a None. It could be an attribute 
error at runtime. This illustrate why we might want to avoid Union 
and Optional as a return types. Because every caller than should check 
what is return to make safe use of the return value. 

    
There is a better option for this:
Using the @overload decorator from the typing module we can give typecker
more information about the invariance of our function, for instance, 
overload allows for pattern matching similar to overloaded function in 
other languages.

    from typing import Optional, overload

    @overload
    def get_foo(foo_id: None) -> None:
        pass
 
In this case if foo_id is None the output of the function will always be
None.

    @overload
    def get_foo(foo_id: int) -> Foo:
        pass

If Foo id is an integer, the return type will always be a Foo.

And lastly we get the actual definition of get_foo:

    def get_foo(foo_id: Optional[int]) -> Optional[Foo]:
        if foo_id is None:
            return None
        return Foo(foo_id) 

It is important to note that this type checking signatures do not 
affect the runtime. And in runtime the only thing that gets used is 
the final definition of the get_foo. That is why the other two definitions
don't need the body, they can just use path. They are just additional 
information for the type checker to better understad the type invariance
that is implemented by the function. So with this definition if we 
call a get_foo(None) the type checker will understand that the output
value should be None too. And if we call get_foo(1) the typechecker will
understand that the return value is Foo. 


Another way to make the type checker smarter about the understanding
our code is generic functions. 

    from typing import TypeVar

    AnyStr = TypeVar('AnyStr', str, bytes)

Typevar is like a placeholder for either string or bytes. Type variables 
can be unbounded, but in this case there is a bound of string and types. 

    def concat(a: AnyStr, b: AnyStr) -> AnyStr
        return a+b

This is different from using a Union of string and bytes because the 
typechecker will ensure that the type variable binds to the same type 
throughout any call to the function. And mypy will raise a typecheck error 
if we will try to concatenate a string and a bite.
    
    concat('foo', b'bar')

And this is really good.

    concat(3,6) 
    # this will also cause an error

And what is really important:
if we concatenate two strings:
    reveal_type(concat('foo','bar')) 
Type checker understads that the return value must be a string too.
The same applies to bytes.

Review:
1. We can use unions and optional but sparringly 
2. Overloads and generics allow us to teach the typechecker more about the
invariance of our type signatures.
Comparing to using unions and optionals, generics and oveloads can make 
functions much more usable for callers without needing redundant checks.


What about writing functions that can take an object and call its render 
method:

    def render(obj):
        return obj.render()

This is similar to a number of build-in protocols in python. For instance,
the len protocol will call __len__ dunder method on any object.

We can use Any type that is sort of an escape patch that typing system 
provides. The any type is compatible with anythin. And it makes the type
checking work but in the runtime we can pass in an object that does not 
have a render method and get an error.

    from typing_extensions import Protocol

    class Renderable(Protocol):
        def render(self) -> str: ...

    # we define renderable as a subclass of Protocol and give it 
    # a render method, we don't even need a body for this method.
    # all we are giving here is an interface. 

What matters is the attributes and their types and the methods and their 
type signatures. Once we have this protocol defined, we can say that the 
render method takes an object of the type Renderable and we have some 
random class which has no explicit relationship to renderable simply 
because it has a render method with the correct signature, the type 
checker will except this call and allow us to pass a Foo object to a 
render method because it seed that it matches the protocol.

    from typing_extensions import Protocol

    class Renderable(Protocol):
        def render(self) -> str: ...

    def render (obj: Renderable) -> str:
        return obj.render()

    class Foo:
        def render(self) -> str:
            return "Foo!"

    render(Foo()) # clean!
    render(3)     # error: expected Renderable 



Sometimes we do really want to use the advantages of Python being 
a dynamicall type lanuage. Or you may support a legacy code that was 
written before typechecking has been invented. Type checkere provides 
escape hatches for that.

Escape Hatch #1: Any

Escape Hatch #2: cast 

Escape Hatch #3: ignore 

Escape Hatch #4: stub (pyi) files
In instagram there are a lot of high-performance C and cython code. And
the typechecker can't see any of that code. But you can add a .pyi file 
next to you C-extension file and handle the type checking there. 


Gradual typing
Analyzses annotated functions only.



Monkeytype is a tool for adding annotations to a code.

    $pip install monkeytype
    $monkeytype run mytest.py
    $monkeytype stub some.module
    # and it will print out a stub file that is directly usable.

    $monkeytype apply some.module

Using monkeytype you can annotate large legacy condebases.

There is also a type checker from facebook called Pyre - it is just 
faster for large codebases.
